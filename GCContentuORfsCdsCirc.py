#This script is part of supplementary documents of "Impact of Introns and Homing Endonucleases on Structural Mitogenome Shaping in Hypocreales"
#submitted to Frontiers in Microbiology, section Fungi and Their Interactions
#Manuscript ID: 531057
#Authors:  Paula Fonseca, Fernanda Badotti, Ruth De-Paula, Daniel Araújo, Dener Eduardo Bortolini, Luiz-Eduardo Del-Bem, Vasco Ariston De Carvalho Azevedo, 
#Bertram Brenig, Eric Roberto Guimarães Rocha Aguiar, Aristóteles Góes-Neto

#This script calculates the GC content of whole genome, CDS and genes in the uORFs file
#The files used are as follow: 
# -uORFs - Generated by Mfannot2uORFs.py script
# -cds - Generated by getGenesGenBank2Cds.py script
# -fasta - Donwloaded from NCBI

#******************************************************************************#
#                          Run the code in Python 3+                           #
#******************************************************************************#

# -*- Coding: UTF-8 -*-
#coding: utf-8

import sys
import os.path
from os import path

def checkInputFiles():
    # #Check if all the necessary files names are passed as arguments
    if (len(sys.argv)!=4 or sys.argv[1].find(".uORFs")==-1 or  sys.argv[2].find(".cds")==-1 or sys.argv[3].find(".fasta")==-1):
        print("\n----------------------------------------------------------------------------------------------------\n")
        print("\nUsage:\npython GCContentORFsCdsCirc.py [file_path_name.uORFs] [file_path_name.cds] [file_path_name.fasta]\n")
        sys.exit(0)

    #Get path/file names
    uORFs_file_name=sys.argv[1]
    cds_file_name=sys.argv[2]
    fasta_file_name=sys.argv[3]

    #Check if path/files exists
    if (path.exists(uORFs_file_name)==False or path.exists(cds_file_name)==False or path.exists(fasta_file_name)==False):
        print("\n--------------------------------------------------------------------------------------------\n")
        print("\nOne or more files not found! Check the path and file names.\n")
        print("\n--------------------------------------------------------------------------------------------\n")
        exit(0)

    #Open input files
    uORFs_file=open(uORFs_file_name,'r') 
    cds_file=open(cds_file_name, 'r')
    fasta_file=open(fasta_file_name,'r')

    #Open output files. The ID filename in uORFs file is used to generate the result files ('.gct' and '.csv')
    if (os.name=="nt"):
        uORFs_file_name=uORFs_file_name.strip(".\\")
    output_file_name=uORFs_file_name[0:uORFs_file_name.find(".")]
    output_gct_file=open(output_file_name+".gct",'w')
    #The csv file was generated to help analyze the results. Each row of 'csv' file represent a nucleotide position in the whole genome. 
    #The idea is as follows:
    #Row value= 0 = indicates the nucleotide belongs a non coding region
    #Row value= 1 = indicates the nucleotide belongs a coding region
    #Row value= 2 = indicates the nucleotide belongs a coding region and to 2 genes. 
    #Row value= 10 = indicates the nucleotide belongs a non coding region and to a uORF
    #Row value= 11 = indicates the nucleotide belongs a coding region and to a uORF
    #Row value= 12 = indicates the nucleotide belongs a coding region, to a uORF and 2 genes
    #Row value= 22 = indicates the nucleotide belongs a coding region, to 2 uORFs and 2 genes
    #and so on
    #The strip will remove '.\' that appear on console in Windows 10 before path\filename 
    output_csv_file=open(output_file_name+".csv",'w')

    return uORFs_file,cds_file,fasta_file,output_gct_file,output_csv_file 


#This function creates a numerical array (genome_array) which will tell us where the coding, non coding and uORFs are.
#Based on cds file, the genome_array returned from it contains the data of coding and noncoding regions of genes detailed in GenBank 
def createGenomeArray(cds_file):
    #genome_array represent the whole genome. Position 0 is not used.
    genome_array=[]
    genome_size=0
    #Loop to get data from cds file
    for line in cds_file: 
        #get total genome size from cds file
        if (line.find("Genome size: ")!=-1):
            genome_size=int(line[13:]) 
            #Instantiate size of genome in genome_array and populates with value=0
            genome_array=[0]*(genome_size+1)
        
        #Get start and end positions of coding regions (genes on cds)
        if (line.find(";")!=-1):
            aux_index=line.find(";")
            line=line.strip()
            start=int(line[:aux_index])
            end=int(line[aux_index+1:line.find("#")])
            #Loop to register nucleotides that belong to coding regions, based on start and end positions retrieved
            #This adds +1 every time a nucleotide belong to a gene in cds file
            #To contemplate the circular genome, we use a while loop to process every nucleotide in the sequence
            i=start
            while True:
                genome_array[i]=genome_array[i]+1
                if (i==end):
                    break
                i=i+1
                #Check if it is the final position of genome and point to the first one
                if (i>len(genome_array)-1):
                    i=1
    return genome_size,genome_array

def checkCG(nc_char):
    if (nc_char=='C' or nc_char=='G'):
        return True
    else:
        return False

#This function calculates the GC content of the coding and non coding regions of a sequence. Using the genome_array as input,
#its possible to determinte the GC content in coding and non coding regions. 
def gcContentCalc(start, end, sequence, genome_array):
    #seq_cds store the sequence of nucleotides that are part of the coding region. Those nucleotides that are not part of the coding region are replaced by '-'
    seq_cds=""
    #sum_GC_nc store the sum of GC nucleotides in the sequence
    sum_GC_nc=0
    #sum_GC_nc_cds store the sum of GC nucleotides that are part of coding region in the sequence
    sum_GC_nc_cds=0
    #sum_nc_cds store the sum of ALL nucleotides that are part of coding region in the sequence
    sum_nc_cds=0
    #For every nucleotide in the sequence we do a while loop which comtemplate the circular genome
    #Here we have a sequence of interest being compared and saved on seq_cds, because of this we have a second iterator
    i=start
    seq_it=0
    while True:
        if (checkCG(sequence[seq_it])):
            sum_GC_nc=sum_GC_nc+1
            #Check if nucleotide is part of coding region
            #uORFs nucleotides adds +10 to genome_array and gene coding regions derived form cds file adds +1
            #So we get the remainder of division by 10
            if (genome_array[i]%10>0):
                sum_GC_nc_cds= sum_GC_nc_cds+1
                sum_nc_cds=sum_nc_cds+1
                #Add nucleotide to seq_cds
                seq_cds=seq_cds+sequence[seq_it]
            else:
                seq_cds=seq_cds+'-'
        elif (genome_array[i]%10>0):
                sum_nc_cds=sum_nc_cds+1
                #Add nucleotide to seq_cds
                seq_cds=seq_cds+sequence[seq_it]
        else:
            seq_cds=seq_cds+'-'
        #Adding +10 to genome_array will help later check where are the nucleotides that belong to uORFs in csv file
        #Values greater than or equal 10
        genome_array[i]=genome_array[i]+10
        if (i==end):
            break
        i=i+1
        seq_it=seq_it+1
        #Check if 'i' it is the final position of genome and point to the first one
        if (i>len(genome_array)-1):
            i=1
    tam_seq=len(sequence)
    #The next command line returns: proportion of GC nucleotides in the sequence
    #Nucleotides in coding region of the sequence
    #Total of GC nucleotides in the sequence
    #Total of GC nucleotides in the coding region of the sequence
    #Total of nucleotides in the coding region of the sequence
    return seq_cds, sum_GC_nc, sum_GC_nc_cds, sum_nc_cds


#This function read the whole genome from fasta file
def readWholeGenome(fasta_file):
    #The position 0 of whole_genome will not be used
    whole_genome=" "
    for line in fasta_file:
        if(line[0]!=">"):
            line=line.upper()
            whole_genome=whole_genome+line.strip()
    fasta_file.close()
    return whole_genome

#Funtion that prints and save on output file the individual ORFs results
def printSaveuORFsResults(name_ORF,seq_ORF,sum_ORF_cds,start_ORF,end_ORF,ratio_GC_ORF,ratio_GC_ORF_cds,output_gct_file):
    print("____________________________________________________________")
    print(name_ORF)
    print("uORf original sequence:\n"+seq_ORF+"\nuORF sequence in CDS:\n"+sum_ORF_cds)
    print(start_ORF, end_ORF)
    print("GC Content of Orf:",round(ratio_GC_ORF,2))
    print("GC Content of Orf in CDS:",round(ratio_GC_ORF_cds,2))
    output_gct_file.write(name_ORF)
    output_gct_file.write(str(start_ORF)+","+str(end_ORF)+"\n")
    output_gct_file.write("uORf original sequence:\n"+seq_ORF.rstrip()+"\nuORF sequence in CDS:\n"+sum_ORF_cds+"\n")
    output_gct_file.write("Conteudo GC Orf: "+str(round(ratio_GC_ORF,2))+"\nConteudo GC Orf CDS: "+str(round(ratio_GC_ORF_cds,2))+"\n\n")

#Function that reads the uORFs file and calculate GC content for each one of the ORFs listed in it. Summary variables are returned as result.
def uORFsFileGCCalc(uORFs_file, genome_array, output_gct_file):
    name_ORF=""
    #Total number of GC ORFs nucleotides
    sum_nc_GC_ORFs=0
    #Total number of GC ORFs nucleotides that are part of coding regions
    sum_nc_GC_ORFs_cds=0
    #Total number of ORFs nucleotides
    sum_nc_ORFs=0
    #Total number of ORFs nucleotides in coding regions
    sum_nc_ORFs_cds=0
    for line in uORFs_file:
        if (line.find(">")!=-1):
            name_ORF=line[1:]
        elif (line.find("+")!=-1):
            start_ORF=int(line[1:])
        elif (line.find("-")!=-1):
            end_ORF=int(line[1:])
        elif (line.find("@")!=-1):
            seq_ORF=line[1:].upper().strip()
            size_ORF=len(seq_ORF)
            #Call function that calculate GC Content and update genome_array
            sum_ORF_cds, sum_GC_ORF_nc, sum_GC_ORF_nc_cds, sum_ORF_nc_cds=gcContentCalc(start_ORF, end_ORF, seq_ORF, genome_array)

            #Ratio_GC_ORF shows the proportion of GC nucleotides of the sequence
            ratio_GC_ORF=sum_GC_ORF_nc/len(seq_ORF)*100

            #Ratio_GC_ORF_cds shows the proportion of GC nucleotides in the coding region of the sequence
            ratio_GC_ORF_cds=0
            #Check to avoid division by 0
            if (sum_ORF_nc_cds>0):
                ratio_GC_ORF_cds=sum_GC_ORF_nc_cds/sum_ORF_nc_cds*100
            else:
                ratio_GC_ORF_cds=sum_GC_ORF_nc_cds/1*100
            #Print and save in output files the ORF values
            printSaveuORFsResults(name_ORF, seq_ORF, sum_ORF_cds, start_ORF, end_ORF, ratio_GC_ORF, ratio_GC_ORF_cds, output_gct_file)

            sum_nc_GC_ORFs=sum_nc_GC_ORFs + sum_GC_ORF_nc
            sum_nc_GC_ORFs_cds=sum_nc_GC_ORFs_cds + sum_GC_ORF_nc_cds
            sum_nc_ORFs=sum_nc_ORFs+size_ORF
            sum_nc_ORFs_cds=sum_nc_ORFs_cds+sum_ORF_nc_cds

    #Return summary values
    return sum_nc_GC_ORFs,sum_nc_GC_ORFs_cds,sum_nc_ORFs,sum_nc_ORFs_cds,sum_nc_ORFs-sum_nc_ORFs_cds

#Print and saves on input file the final summary results
def printSaveFinalSummary(genome_size, sum_nc_genome_cds, sum_nc_genome_noncod, sum_GC_nc, sum_GC_nc_cds, sum_GC_nc_noncod, sum_nc_ORFs, sum_nc_GC_ORFs, sum_nc_ORFs_cds, \
     sum_nc_GC_ORFs_cds, sum_nc_ORFs_noncod, output_gct_file):

    print("____________________________________________________________")
    print("\n")
    print("------------------------------------------------------------------------------------------------------------------------------------")
    print("Whole genome total size = "+str(genome_size)+" nucleotides, where "+ str(sum_nc_genome_cds)+" nucleotides ("+str(round(sum_nc_genome_cds/genome_size*100,2)) \
        +"%) belongs to coding regions (CDS) and "+ str(sum_nc_genome_noncod)+" nucleotides ("+str(round(sum_nc_genome_noncod/genome_size*100,2))+"%) belongs to non coding regions (NC)")
    print("Whole genome GC content = "+str(sum_GC_nc)+" of "+str(genome_size)+" nucleotides ("+str(round(sum_GC_nc/genome_size*100,2))+"%)")
    print("GC content in coding regions = "+str(sum_GC_nc_cds)+" of "+str(sum_nc_genome_cds)+" nucleotides ("+str(round(sum_GC_nc_cds/sum_nc_genome_cds*100,2))+"%)")
    print("GC content in non coding regions = "+str(sum_GC_nc_noncod)+" of "+str(sum_nc_genome_noncod)+" nucleotides (" +str(round(sum_GC_nc_noncod/sum_nc_genome_noncod*100,2))+"%)")         
    print("uORFs total size = "+ str(sum_nc_ORFs) + " nucleotides, corresponding to " + str(round(sum_nc_ORFs/genome_size*100,2))+ "% "+"of whole genome")
    print("uORfs GC content = " +str(sum_nc_GC_ORFs)+" of "+str(sum_nc_ORFs)+" nucleotides ("+str(round(sum_nc_GC_ORFs/sum_nc_ORFs*100,2))+"%)")
    print("uORFs total size in coding regions (CDS) = "+ str(sum_nc_ORFs_cds) + " of "+ str(sum_nc_ORFs)+" nucleotides ("+str(round(sum_nc_ORFs_cds/sum_nc_ORFs*100,2))+"%)")
    print("uORFs total size in non coding regions (NC) = "+ str(sum_nc_ORFs_noncod) + " of "+ str(sum_nc_ORFs)+" nucleotides ("+str(round(sum_nc_ORFs_noncod/sum_nc_ORFs*100,2))+"%)")
    print("uORFs GC content in coding regions (CDS) = " +str(sum_nc_GC_ORFs_cds)+" of "+str(sum_nc_ORFs_cds) + " nucleotides ("+ str(round(sum_nc_GC_ORFs_cds/sum_nc_ORFs_cds*100,2))+"%)")
    #Avoid division by 0
    if (sum_nc_ORFs_noncod!=0):
        print("uORFs GC content in non coding regions (NC) = " +str(sum_nc_GC_ORFs-sum_nc_GC_ORFs_cds)+" of "+str(sum_nc_ORFs_noncod) + " nucleotides ("+ \
        str(round((sum_nc_GC_ORFs-sum_nc_GC_ORFs_cds)/(sum_nc_ORFs_noncod)*100,2))+"%)")
    else:
        print("uORFs GC content in non coding regions (NC) = " +str(sum_nc_GC_ORFs-sum_nc_GC_ORFs_cds)+" of "+str(sum_nc_ORFs_noncod) + " nucleotides (0%)")
    print("------------------------------------------------------------------------------------------------------------------------------------")

    output_gct_file.write("\n")
    output_gct_file.write("------------------------------------------------------------------------------------------------------------------------------------\n")
    output_gct_file.write("Whole genome total size = "+str(genome_size)+" nucleotides, where "+ str(sum_nc_genome_cds)+" nucleotides ("+str(round(sum_nc_genome_cds/genome_size*100,2)) \
        +"%) belongs to coding regions (CDS) and "+ str(sum_nc_genome_noncod)+" nucleotides ("+str(round(sum_nc_genome_noncod/genome_size*100,2))+"%) belongs to non coding regions (NC)\n")
    output_gct_file.write("Whole genome GC content = "+str(sum_GC_nc)+" of "+str(genome_size)+" nucleotides ("+str(round(sum_GC_nc/genome_size*100,2))+"%)\n")
    output_gct_file.write("GC content in coding regions = "+str(sum_GC_nc_cds)+" of "+str(sum_nc_genome_cds)+" nucleotides ("+str(round(sum_GC_nc_cds/sum_nc_genome_cds*100,2))+"%)\n")
    output_gct_file.write("GC content in non coding regions = "+str(sum_GC_nc_noncod)+" of "+str(sum_nc_genome_noncod)+" nucleotides (" +str(round(sum_GC_nc_noncod/sum_nc_genome_noncod*100,2))+"%)\n")         
    output_gct_file.write("uORFs total size = "+ str(sum_nc_ORFs) + " nucleotides, corresponding to " + str(round(sum_nc_ORFs/genome_size*100,2))+ "% "+"of whole genome\n")
    output_gct_file.write("uORfs GC content = " +str(sum_nc_GC_ORFs)+" of "+str(sum_nc_ORFs)+" nucleotides ("+str(round(sum_nc_GC_ORFs/sum_nc_ORFs*100,2))+"%)\n")
    output_gct_file.write("uORFs total size in coding regions (CDS) = "+ str(sum_nc_ORFs_cds) + " of "+ str(sum_nc_ORFs)+" nucleotides ("+str(round(sum_nc_ORFs_cds/sum_nc_ORFs*100,2))+"%)\n")
    output_gct_file.write("uORFs total size in non coding regions (NC) = "+ str(sum_nc_ORFs_noncod) + " of "+ str(sum_nc_ORFs)+" nucleotides ("+str(round(sum_nc_ORFs_noncod/sum_nc_ORFs*100,2))+"%)\n")
    output_gct_file.write("uORFs GC content in coding regions (CDS) = " +str(sum_nc_GC_ORFs_cds)+" of "+str(sum_nc_ORFs_cds) + " nucleotides ("+ str(round(sum_nc_GC_ORFs_cds/sum_nc_ORFs_cds*100,2))+"%)\n")
    #Avoid division by 0
    if (sum_nc_ORFs_noncod!=0):
        output_gct_file.write("uORFs GC content in non coding regions (NC) = " +str(sum_nc_GC_ORFs-sum_nc_GC_ORFs_cds)+" of "+str(sum_nc_ORFs_noncod) + " nucleotides ("+ \
        str(round((sum_nc_GC_ORFs-sum_nc_GC_ORFs_cds)/(sum_nc_ORFs_noncod)*100,2))+"%)\n")
    else:
        output_gct_file.write("uORFs GC content in non coding regions (NC) = " +str(sum_nc_GC_ORFs-sum_nc_GC_ORFs_cds)+" of "+str(sum_nc_ORFs_noncod) + " nucleotides (0%)\n")
    output_gct_file.write("------------------------------------------------------------------------------------------------------------------------------------\n")

#Calculate GC content in whole Genome
def wholeGenomeGCCalc(output_csv_file,output_gct_file,whole_genome, genome_array):
    #Total of nucleotides in the whole genome that belongs to coding regions
    sum_nc_genome_cds=0
    #Total of nucleotides in the whole genome that belongs to non coding regions
    sum_nc_genome_noncod=0
    #Total of GC nucleotides in the whole genome that belongs to coding regions
    sum_GC_nc_cds=0
    #Total of GC nucleotides in the whole genome
    sum_GC_nc=0

    for i in range(1,len(genome_array)):
        output_csv_file.write(str(genome_array[i])+"\n")
        if (checkCG(whole_genome[i])):
            sum_GC_nc=sum_GC_nc+1
            #Check if nucleotide is part of coding region
            #uORFs nucleotides adds +10 to genome_array and gene coding regions derived form cds file adds +1
            #So we get the remainder of division by 10
            if (genome_array[i]%10>0):
                sum_GC_nc_cds= sum_GC_nc_cds+1
                sum_nc_genome_cds=sum_nc_genome_cds+1
        elif (genome_array[i]%10>0):
                sum_nc_genome_cds=sum_nc_genome_cds+1

    return sum_nc_genome_cds, sum_GC_nc_cds, sum_GC_nc


def main():

    uORFs_file,cds_file,fasta_file,output_gct_file,output_csv_file =checkInputFiles()

    #Call function that reads data from 'cds' file, creating genome_array
    genome_size,genome_array = createGenomeArray(cds_file)

    #Call function to read whole genome from fasta file
    whole_genome=readWholeGenome(fasta_file)

    #Call function to calculate GC Content of uORfs
    sum_nc_GC_ORFs, sum_nc_GC_ORFs_cds, sum_nc_ORFs, sum_nc_ORFs_cds,sum_size_uorfs_noncod=uORFsFileGCCalc(uORFs_file,genome_array,output_gct_file)

    #Call function to calculate GC Content of whole genome
    sum_nc_genome_cds, sum_GC_nc_cds, sum_GC_nc=wholeGenomeGCCalc(output_csv_file,output_gct_file, whole_genome, genome_array)
    sum_nc_genome_noncod=genome_size-sum_nc_genome_cds
    sum_GC_nc_noncod=sum_GC_nc-sum_GC_nc_cds

    #Calculate number of ORFs nucleotides in non coding regions
    sum_nc_ORFs_noncod=sum_nc_ORFs-sum_nc_ORFs_cds
    
    #Print final summary
    printSaveFinalSummary(genome_size, sum_nc_genome_cds, sum_nc_genome_noncod, sum_GC_nc, sum_GC_nc_cds, sum_GC_nc_noncod, sum_nc_ORFs, sum_nc_GC_ORFs, sum_nc_ORFs_cds, \
sum_nc_GC_ORFs_cds, sum_nc_ORFs_noncod, output_gct_file)

    print("\n\n____________________________________________________________")
    print("\n\nResults saved in: "+str(output_gct_file.name)+" e "+str(output_csv_file.name)+"\n")
    print("____________________________________________________________\n\n\n")

    uORFs_file.close()
    cds_file.close()
    output_csv_file.close()
    output_gct_file.close()

if __name__ == '__main__':
    main()

