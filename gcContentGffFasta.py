#This script is part of supplementary documents of "Impact of Introns and Homing Endonucleases on Structural Mitogenome Shaping in Hypocreales"
#submitted to Frontiers in Microbiology, section Fungi and Their Interactions
#Manuscript ID: 531057
#Authors:  Paula Fonseca, Fernanda Badotti, Ruth De-Paula, Daniel Araújo, Dener Eduardo Bortolini, Luiz-Eduardo Del-Bem, Vasco Ariston De Carvalho Azevedo, 
#Bertram Brenig, Eric Roberto Guimarães Rocha Aguiar, Aristóteles Góes-Neto

#This script calculates the GC content of whole genome, coding and non coding regions, based on gff file (generated by Mitos MitFi)
#The files used are as follow: 
# -gff
# -fasta
# Both can be downloaded from NCBI using getGffFastFilesNCBI.py script

#******************************************************************************#
#                          Run the code in Python 3+                           #
#******************************************************************************#

# -*- Coding: UTF-8 -*-
#coding: utf-8

import sys
from pathlib import Path
import os.path
from os import path

def checkInputFiles():
    #Check if all the necessary files names are passed as arguments
    if (len(sys.argv)!=3 or sys.argv[1].find(".gff")==-1 or sys.argv[2].find(".fasta")==-1):
        print("\n----------------------------------------------------------------------------------------------------\n")
        print("\nUsage:\npython GCContentGffFasta.py [file_path_name.gff] [file_path_name.fasta]\n")
        print("\n----------------------------------------------------------------------------------------------------\n")
        sys.exit(0)

    #Get path/file names
    gff_file_name=sys.argv[1]
    fasta_file_name=sys.argv[2]


    #Check if path/files exists
    if (path.exists(gff_file_name)==False or path.exists(fasta_file_name)==False):
        print("\n--------------------------------------------------------------------------------------------\n")
        print("\nOne or more files not found! Check the path and file names.\n")
        print("\n--------------------------------------------------------------------------------------------\n")
        exit(0)

    #Open input files
    gff_file=open(gff_file_name,'r') 
    fasta_file=open(fasta_file_name, 'r')

    #Open output files. The ID filename in fasta file is used to generate the result files ('.gct' and '.csv')
    if (os.name=="nt"):
        fasta_file_name=fasta_file_name.strip(".\\")
    output_file_name=fasta_file_name[0:fasta_file_name.find(".")]
    output_gcf_file=open(output_file_name+".gcf",'w')

    return gff_file,fasta_file,output_gcf_file


def checkCG(nc_char):
    if (nc_char=='C' or nc_char=='G'):
        return True
    else:
        return False

#This function read the whole genome from fasta file
def readWholeGenome(fasta_file):
    #The position 0 of whole_genome will not be used
    whole_genome=" "
    for line in fasta_file:
        if(line[0]!=">"):
            line=line.upper()
            whole_genome=whole_genome+line.strip()
    fasta_file.close()
    return whole_genome

#This function populates the numerical array (genome_array), which will tell us where the coding and non coding regions are, based on gff file.
def populateGenomeArray(gff_file, genome_array):
    for line in gff_file: 
        spl_line=line.split("\t")
        #Gene reference in gff file are define between 2nd and 3rd tab
        #Check if line reference a gene
        if (len(spl_line)==9 and spl_line[2]=="gene"):
            #if true, then get start and end positions of gene
            start=int(spl_line[3])
            end=int(spl_line[4])
            #Loop to register nucleotides that belong to coding regions, based on start and end positions retrieved
            #This adds +1 every time a nucleotide belong to a gene in cds file
            #To contemplate the circular genome, we use a while loop to process every nucleotide in the sequence
            i=start
            while True:
                genome_array[i]=genome_array[i]+1
                if (i==end):
                    break
                i=i+1
                #Check if it is the final position of genome and point to the first one
                if (i>len(genome_array)-1):
                    i=1

def printSaveResults(genome_size,sum_nc_cds,sum_nc_noncod,sum_GC_nc,sum_GC_nc_cds,sum_GC_nc_noncod,output_gcf_file):
    print("------------------------------------------------------------------------------------------------------------------------------------")
    print("Whole genome total size = "+str(genome_size)+" nucleotides, where "+ str(sum_nc_cds)+" nucleotides ("+str(round(sum_nc_cds/genome_size*100,2)) \
        +"%) belongs to coding regions (CDS) and "+ str(sum_nc_noncod)+" nucleotides ("+str(round(sum_nc_noncod/genome_size*100,2))+"%) belongs to non coding regions (NC)")
    print("Whole genome GC content = "+str(sum_GC_nc)+" of "+str(genome_size)+" nucleotides ("+str(round(sum_GC_nc/genome_size*100,2))+"%)")
    print("GC content in coding regions = "+str(sum_GC_nc_cds)+" of "+str(sum_nc_cds)+" nucleotides ("+str(round(sum_GC_nc_cds/sum_nc_cds*100,2))+"%)")
    print("GC content in non coding regions = "+str(sum_GC_nc_noncod)+" of "+str(sum_nc_noncod)+" nucleotides (" +str(round(sum_GC_nc_noncod/sum_nc_noncod*100,2))+"%)")   
    print("------------------------------------------------------------------------------------------------------------------------------------")

    output_gcf_file.write("------------------------------------------------------------------------------------------------------------------------------------\n")
    output_gcf_file.write("Whole genome total size = "+str(genome_size)+" nucleotides, where "+ str(sum_nc_cds)+" nucleotides ("+str(round(sum_nc_cds/genome_size*100,2)) \
        +"%) belongs to coding regions (CDS) and "+ str(sum_nc_noncod)+" nucleotides ("+str(round(sum_nc_noncod/genome_size*100,2))+"%) belongs to non coding regions (NC)\n")
    output_gcf_file.write("Whole genome GC content = "+str(sum_GC_nc)+" of "+str(genome_size)+" nucleotides ("+str(round(sum_GC_nc/genome_size*100,2))+"%)\n")
    output_gcf_file.write("GC content in coding regions = "+str(sum_GC_nc_cds)+" of "+str(sum_nc_cds)+" nucleotides ("+str(round(sum_GC_nc_cds/sum_nc_cds*100,2))+"%)\n")
    output_gcf_file.write("GC content in non coding regions = "+str(sum_GC_nc_noncod)+" of "+str(sum_nc_noncod)+" nucleotides (" +str(round(sum_GC_nc_noncod/sum_nc_noncod*100,2))+"%)\n")   
    output_gcf_file.write("------------------------------------------------------------------------------------------------------------------------------------\n")



def calcGCContent(genome_array,genome):
    #Total GC nucleotides in coding regions
    sum_GC_nc_cds = 0
    #Total nucleotides in coding regions
    sum_nc_cds = sum(i > 0 for i in genome_array)
    #Total GC nucleotides in genome
    sum_GC_nc=genome.count('G')+genome.count('C')
    for i in range(1,len(genome)):
        if(checkCG(genome[i])):
            if (genome_array[i]!=0):
                sum_GC_nc_cds=sum_GC_nc_cds+1
    #Total nucleotides in genome
    genome_size=len(genome)-1
    #Total nucleotides in non coding regions
    sum_nc_noncod=genome_size-sum_nc_cds
    #Total GC nucleotides in non coding regions
    sum_GC_nc_noncod=sum_GC_nc-sum_GC_nc_cds

    return genome_size,sum_nc_cds,sum_nc_noncod,sum_GC_nc,sum_GC_nc_cds,sum_GC_nc_noncod

def main():
    gff_file,fasta_file,output_gcf_file=checkInputFiles()

    genome=readWholeGenome(fasta_file)
    #Instantiate genome_array with size of genome +1 and populates with value=0
    #Genome_array represent the whole genome. Position 0 is not used.
    genome_array=[0]*len(genome)

    #Populate array with coding regions
    populateGenomeArray(gff_file, genome_array)

    #Calculate GC content in coding and no coding regions
    genome_size,sum_nc_cds,sum_nc_noncod,sum_GC_nc,sum_GC_nc_cds,sum_GC_nc_noncod=calcGCContent(genome_array,genome)

    #Print and save results
    printSaveResults(genome_size,sum_nc_cds,sum_nc_noncod,sum_GC_nc,sum_GC_nc_cds,sum_GC_nc_noncod,output_gcf_file)

    print("\n\n____________________________________________________________")
    print("\n\nResults saved in: "+str(output_gcf_file.name)+"\n")
    print("____________________________________________________________\n\n\n")

    output_gcf_file.close()

if __name__ == '__main__':
    main()